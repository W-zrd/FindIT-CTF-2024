from Crypto.Util.number import long_to_bytes
import gmpy2

def fermat_factor(n):
    a = gmpy2.isqrt(n)
    b2 = a*a - n
    while not gmpy2.is_square(b2):
        a += 1
        b2 = a*a - n
    return a - gmpy2.isqrt(b2), a + gmpy2.isqrt(b2)

# Challenge output values
n = 16137683191820310878869074467935595895866425293478654373392241125665908634329070796576934138349116080339366432144659281080883658707735249601117248786028782982566346043722079648833155351477752764946216113467397096834294861532891472787672809649484134981191259738441311836612930367762697605775961668622571582619349907426952465513780247332875266844625087691260924135390764250111701515809446120291499318404177776195005227198068534242395666723755147128298391229213468845029961285851146131594588464143938281513184554635998020910090505194083134012592546674890085963540956322441499400925678804978928467131012058417031450201
e = 3
ct1 = 14230070742561114358197460196923312606263014813829421109905030908044415759191882552540618684777989687442727816457042537621183557321703273531263691955457570799480042831428672127252863638050725064162185236092160587699489439619363101490502837568129855145408959716770113618887212546816572889411830491453335444192715249847478096085374560922220896773469190891959702254575362954926649820945569684418191074988372784789266556524039058080721740857246440064588613468421257925443658351199981090967034582172895484680562928087692560665356190093834366801305067676548679604735072240551445613855333917355810203565389127483192500
ct2 = 1162058741139703411882718840299163445889014873921058212659181182272038019635990430279663609223145491845380854634114642769416565916807153162688171637949291999168289655939167770893532963349676739332219862753927985833192383312938176553498307854585408231561734581230982139377947236038641922931127380154047933642400331768310358442953398155463511614606398671621653326712682260612552949439015576143309340969906858395593363691840338727713937534086295591225589615606689859364142559551231357008606553918956479644637494592092304761371222474066693285327782960815466539823063183231321807843367025397546195321050460583001407

# Recover the primes p and q
p, q = fermat_factor(n)

# Calculate the private exponent d
phi = (p-1)*(q-1)
d = gmpy2.invert(e, phi)

# Decrypt the ciphertexts
pt1 = pow(ct1, d, n)
pt2 = pow(ct2, d, n)

flag1 = long_to_bytes(pt1).decode()
flag2 = long_to_bytes(pt2).decode()

# Recover the original flag
evolutions = ['alpha', 'sigma', 'ligma', 'omega', 'skibi', 'rizlr']

for evo in evolutions:
    if evo in flag1:
        flag = flag1.replace(evo, "beta")[:-12]
        break
    elif evo in flag2:
        flag = flag2.replace(evo, "beta")[:-12]
        break

print("Flag:", flag)